<UserControl
    x:Class="TileShop.UI.Views.ScatteredArrangerEditorView"
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:con="using:TileShop.UI.Converters"
    xmlns:fac="using:FluentAvalonia.UI.Controls"
    xmlns:m="using:TileShop.UI.Models"
    xmlns:model="using:TileShop.Shared.Models"
    xmlns:paz="using:Avalonia.Controls.PanAndZoom"
    xmlns:res="using:TileShop.UI.Resources"
    xmlns:vm="using:TileShop.UI.ViewModels"
    x:Name="control"
    x:DataType="vm:ScatteredArrangerEditorViewModel">
    <UserControl.KeyBindings>
        <KeyBinding Command="{Binding ToggleGridlineVisibilityCommand}" Gesture="G" />
        <KeyBinding Command="{Binding EditSelectionCommand}" Gesture="E" />
        <KeyBinding Command="{Binding ToggleSnapModeCommand}" Gesture="S" />
        <KeyBinding Command="{Binding DeleteElementSelectionCommand}" Gesture="Delete" />
        <KeyBinding Command="{Binding CancelOverlayCommand}" Gesture="Escape" />
        <KeyBinding Command="{Binding ConfirmPendingOperationCommand}" Gesture="Return" />
        <KeyBinding Command="{Binding SaveChangesCommand}" Gesture="Ctrl+S" />
        <KeyBinding Command="{Binding UndoCommand}" Gesture="Ctrl+Z" />
        <KeyBinding Command="{Binding RedoCommand}" Gesture="Ctrl+Y" />
        <KeyBinding Command="{Binding SelectAllCommand}" Gesture="Ctrl+A" />
        <KeyBinding Command="{Binding ModifyGridSettingsCommand}" Gesture="Ctrl+G" />
    </UserControl.KeyBindings>

    <UserControl.ContextMenu>
        <ContextMenu>
            <MenuItem Command="{Binding SelectAllCommand}" Header="Select All" />
            <MenuItem Command="{Binding ModifyGridSettingsCommand}" Header="Grid Settings..." />
            <MenuItem Command="{Binding ToggleSymmetryToolsCommand}" Header="Show Symmetry Tools">
                <Interaction.Behaviors>
                    <DataTriggerBehavior Binding="{Binding #control.((vm:ScatteredArrangerEditorViewModel)DataContext).AreSymmetryToolsEnabled}" Value="True">
                        <ChangePropertyAction PropertyName="Icon">
                            <ChangePropertyAction.Value>
                                <fac:FAPathIcon Classes="menu" Data="{x:Static res:AppIcons.CheckedBox}" />
                            </ChangePropertyAction.Value>
                        </ChangePropertyAction>
                    </DataTriggerBehavior>
                    <DataTriggerBehavior Binding="{Binding #control.((vm:ScatteredArrangerEditorViewModel)DataContext).AreSymmetryToolsEnabled}" Value="False">
                        <ChangePropertyAction PropertyName="Icon">
                            <ChangePropertyAction.Value>
                                <fac:FAPathIcon Classes="menu" Data="{x:Static res:AppIcons.UncheckedBox}" />
                            </ChangePropertyAction.Value>
                        </ChangePropertyAction>
                    </DataTriggerBehavior>
                </Interaction.Behaviors>
            </MenuItem>
        </ContextMenu>
    </UserControl.ContextMenu>

    <Grid RowDefinitions="auto,*" UseLayoutRounding="True">
        <!--  Toolbar  -->
        <Border Padding="8">
            <StackPanel Orientation="Horizontal" Spacing="4">
                <!--  Tools  -->
                <StackPanel Margin="0,8,0,8" Spacing="4">
                    <TextBlock HorizontalAlignment="Center" Text="Tools" />

                    <StackPanel Orientation="Horizontal" Spacing="4">
                        <RadioButton
                            Classes="tool"
                            Command="{Binding ChangeToolCommand}"
                            CommandParameter="{x:Static vm:ScatteredArrangerTool.Select}"
                            IsChecked="{Binding ActiveTool, Mode=OneWay, Converter={x:Static con:AppConverters.EnumToBoolean}, ConverterParameter=Select}"
                            ToolTip.Tip="Click and drag across Arranger to select a region or hold Ctrl to quickly drag single elements">
                            <fac:FAPathIcon Classes="medium" Data="{x:Static res:AppIcons.RectangularSelection}" />
                        </RadioButton>
                        <RadioButton
                            Classes="tool"
                            Command="{Binding ChangeToolCommand}"
                            CommandParameter="{x:Static vm:ScatteredArrangerTool.ApplyPalette}"
                            IsChecked="{Binding ActiveTool, Mode=OneWay, Converter={x:Static con:AppConverters.EnumToBoolean}, ConverterParameter=ApplyPalette}"
                            ToolTip.Tip="{Binding SelectedPalette.Name, StringFormat='Click on an Arranger element to apply the current palette (\{0\})'}">
                            <fac:FAPathIcon Classes="medium vflip" Data="{x:Static res:AppIcons.PaletteBrush}" />
                        </RadioButton>
                        <RadioButton
                            Classes="tool"
                            Command="{Binding ChangeToolCommand}"
                            CommandParameter="{x:Static vm:ScatteredArrangerTool.PickPalette}"
                            IsChecked="{Binding ActiveTool, Mode=OneWay, Converter={x:Static con:AppConverters.EnumToBoolean}, ConverterParameter=PickPalette}"
                            ToolTip.Tip="Click on an Arranger element to pick its associated palette">
                            <fac:FAPathIcon Classes="medium" Data="{x:Static res:AppIcons.PalettePicker}" />
                        </RadioButton>
                        <RadioButton
                            Classes="tool"
                            Command="{Binding ChangeToolCommand}"
                            CommandParameter="{x:Static vm:ScatteredArrangerTool.InspectElement}"
                            IsChecked="{Binding ActiveTool, Mode=OneWay, Converter={x:Static con:AppConverters.EnumToBoolean}, ConverterParameter=InspectElement}"
                            ToolTip.Tip="Hover Arranger elements to inspect their properties">
                            <fac:FAPathIcon Classes="medium" Data="{x:Static res:AppIcons.Eye}" />
                        </RadioButton>

                        <RadioButton
                            Classes="tool"
                            Command="{Binding ChangeToolCommand}"
                            CommandParameter="{x:Static vm:ScatteredArrangerTool.RotateLeft}"
                            IsChecked="{Binding ActiveTool, Mode=OneWay, Converter={x:Static con:AppConverters.EnumToBoolean}, ConverterParameter=RotateLeft}"
                            IsVisible="{Binding AreSymmetryToolsEnabled}"
                            ToolTip.Tip="Rotate Element's Display Left">
                            <fac:FAPathIcon Classes="medium" Data="{x:Static res:AppIcons.RotateLeft}" />
                        </RadioButton>
                        <RadioButton
                            Classes="tool"
                            Command="{Binding ChangeToolCommand}"
                            CommandParameter="{x:Static vm:ScatteredArrangerTool.RotateRight}"
                            IsChecked="{Binding ActiveTool, Mode=OneWay, Converter={x:Static con:AppConverters.EnumToBoolean}, ConverterParameter=RotateRight}"
                            IsVisible="{Binding AreSymmetryToolsEnabled}"
                            ToolTip.Tip="Rotate Element's Display Right">
                            <fac:FAPathIcon Classes="medium" Data="{x:Static res:AppIcons.RotateRight}" />
                        </RadioButton>
                        <RadioButton
                            Classes="tool"
                            Command="{Binding ChangeToolCommand}"
                            CommandParameter="{x:Static vm:ScatteredArrangerTool.MirrorHorizontal}"
                            IsChecked="{Binding ActiveTool, Mode=OneWay, Converter={x:Static con:AppConverters.EnumToBoolean}, ConverterParameter=MirrorHorizontal}"
                            IsVisible="{Binding AreSymmetryToolsEnabled}"
                            ToolTip.Tip="Mirror Element's Display Horizontally">
                            <fac:FAPathIcon Classes="medium" Data="{x:Static res:AppIcons.MirrorHorizontal}" />
                        </RadioButton>
                        <RadioButton
                            Classes="tool"
                            Command="{Binding ChangeToolCommand}"
                            CommandParameter="{x:Static vm:ScatteredArrangerTool.MirrorVertical}"
                            IsChecked="{Binding ActiveTool, Mode=OneWay, Converter={x:Static con:AppConverters.EnumToBoolean}, ConverterParameter=MirrorVertical}"
                            IsVisible="{Binding AreSymmetryToolsEnabled}"
                            ToolTip.Tip="Mirror Element's Display Vertically">
                            <fac:FAPathIcon Classes="medium" Data="{x:Static res:AppIcons.MirrorVertical}" />
                        </RadioButton>
                    </StackPanel>
                </StackPanel>

                <Border
                    Margin="8,0,8,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Stretch"
                    Background="{DynamicResource separatorBrush}"
                    BorderBrush="{DynamicResource separatorBrush}"
                    BorderThickness="1"
                    CornerRadius="1"
                    Opacity="0.1" />

                <StackPanel Margin="0,8,0,8" IsVisible="{Binding IsIndexedColor}" Spacing="4">
                    <TextBlock HorizontalAlignment="Center" Text="Palette" />
                    <StackPanel Orientation="Horizontal" Spacing="4">
                        <ComboBox MaxWidth="200" ItemsSource="{Binding Palettes}" SelectedItem="{Binding SelectedPalette}">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Name}" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>

                        <Button VerticalAlignment="Bottom" VerticalContentAlignment="Center" Command="{Binding AssociatePaletteCommand}" ToolTip.Tip="Associate an existing Palette from this Project with this Arranger">
                            <fac:FAPathIcon Classes="medium" Data="{x:Static res:AppIcons.PlusCircle}" />
                        </Button>
                    </StackPanel>
                </StackPanel>

                <Border
                    Margin="8,0,8,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Stretch"
                    Background="{DynamicResource separatorBrush}"
                    BorderBrush="{DynamicResource separatorBrush}"
                    BorderThickness="1"
                    CornerRadius="1"
                    Opacity="0.1" />

                <StackPanel Margin="0,8,0,8" Spacing="4">
                    <TextBlock HorizontalAlignment="Center" Text="Grid" />
                    <ToggleButton Focusable="False" IsChecked="{Binding GridSettings.ShowGridlines}" ToolTip.Tip="Toggle gridline visibility (G)">
                        <fac:FAPathIcon Classes="medium" Data="{x:Static res:AppIcons.Grid}" />
                    </ToggleButton>
                </StackPanel>

                <StackPanel Margin="0,8,0,8" IsVisible="{Binding CanChangeSnapMode}" Spacing="4">
                    <TextBlock HorizontalAlignment="Center" Text="Snap" />
                    <ToggleButton Focusable="False" IsChecked="{Binding SnapMode, Converter={x:Static con:AppConverters.SnapModeBoolean}}" ToolTip.Tip="Snap Selection to Elements (S)">
                        <fac:FAPathIcon Classes="medium" Data="{x:Static res:AppIcons.Snap}" />
                    </ToggleButton>
                </StackPanel>

                <Border
                    Margin="8,0,8,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Stretch"
                    Background="{DynamicResource separatorBrush}"
                    BorderBrush="{DynamicResource separatorBrush}"
                    BorderThickness="1"
                    CornerRadius="1"
                    Opacity="0.1" />

                <StackPanel Margin="0,8,0,8" IsVisible="{Binding IsTiledLayout}" Spacing="4">
                    <TextBlock HorizontalAlignment="Center" Text="Resize" />

                    <Button Command="{Binding ResizeArrangerCommand}" ToolTip.Tip="Resizes the Arranger">
                        <fac:FAPathIcon Classes="medium" Data="{x:Static res:AppIcons.Resize}" />
                    </Button>
                </StackPanel>

                <StackPanel Margin="0,8,0,8" Spacing="4">
                    <TextBlock HorizontalAlignment="Center" Text="Edit" />

                    <Button Command="{Binding EditSelectionCommand}" IsEnabled="{Binding CanEditSelection}" ToolTip.ShowOnDisabled="True" ToolTip.Tip="Opens selection in the pixel editor (E)">
                        <fac:FAPathIcon Classes="medium vflip" Data="{x:Static res:AppIcons.Edit}" />
                    </Button>
                </StackPanel>
            </StackPanel>
        </Border>

        <!--  Image Display  -->
        <ScrollViewer
            Grid.Row="1"
            Grid.Column="0"
            Focusable="True"
            HorizontalScrollBarVisibility="Auto"
            KeyDown="OnKeyDown"
            KeyUp="OnKeyUp"
            VerticalScrollBarVisibility="Auto">

            <paz:ZoomBorder x:Name="_zoomBorder" PowerFactor="2">
                <Grid>
                    <!--  Image, Selection, and Paste Overlay  -->
                    <Canvas
                        x:Name="_overlayCanvas"
                        Width="{Binding BitmapAdapter.Width}"
                        Height="{Binding BitmapAdapter.Height}"
                        Background="{Binding GridSettings.BackgroundBrush}"
                        Classes="arrangerDrop"
                        ClipToBounds="True"
                        PointerExited="OnPointerExited"
                        PointerMoved="OnPointerMoved"
                        PointerPressed="OnPointerPressed"
                        PointerReleased="OnPointerReleased">

                        <!--  Arranged Image  -->
                        <Image
                            x:Name="_image"
                            Classes="pixel"
                            IsHitTestVisible="False"
                            RenderOptions.BitmapInterpolationMode="None"
                            Source="{Binding BitmapAdapter.Bitmap}" />

                        <!--  Selection Overlay  -->
                        <Rectangle
                            Canvas.Left="{Binding Selection.SelectionRect.SnappedLeft}"
                            Canvas.Top="{Binding Selection.SelectionRect.SnappedTop}"
                            Width="{Binding Selection.SelectionRect.SnappedWidth}"
                            Height="{Binding Selection.SelectionRect.SnappedHeight}"
                            Classes="arrangerDrag animatedBorder selection"
                            IsVisible="{Binding Selection.HasSelection}" />

                        <!--  Paste Image  -->
                        <Image
                            x:Name="pasteImage"
                            Canvas.Left="{Binding Paste.Rect.SnappedLeft}"
                            Canvas.Top="{Binding Paste.Rect.SnappedTop}"
                            Width="{Binding Paste.Rect.SnappedWidth, FallbackValue=0}"
                            Height="{Binding Paste.Rect.SnappedHeight, FallbackValue=0}"
                            Classes="arrangerDrag pixel"
                            IsHitTestVisible="{Binding !Paste.IsDragging}"
                            RenderOptions.BitmapInterpolationMode="None"
                            Source="{Binding Paste.OverlayImage.Bitmap}" />

                        <!--  Paste Overlay  -->
                        <Rectangle
                            Canvas.Left="{Binding Paste.Rect.SnappedLeft}"
                            Canvas.Top="{Binding Paste.Rect.SnappedTop}"
                            Width="{Binding Paste.Rect.SnappedWidth, FallbackValue=0}"
                            Height="{Binding Paste.Rect.SnappedHeight, FallbackValue=0}"
                            Classes="animatedBorder paste" />
                    </Canvas>

                    <!--  Gridline Overlay  -->
                    <ItemsControl
                        MaxWidth="{Binding BitmapAdapter.Width}"
                        MaxHeight="{Binding BitmapAdapter.Height}"
                        ClipToBounds="True"
                        IsHitTestVisible="False"
                        IsVisible="{Binding GridSettings.ShowGridlines}"
                        ItemsSource="{Binding GridSettings.Gridlines}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <Canvas IsHitTestVisible="False" />
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="{x:Type model:Gridline}">
                                <Line
                                    IsHitTestVisible="False"
                                    Stroke="{Binding #_zoomBorder.((vm:ArrangerEditorViewModel)DataContext).GridSettings.LineColor, Converter={x:Static con:AppConverters.ColorToBrush}}"
                                    StrokeThickness="0.40"
                                    UseLayoutRounding="True"
                                    StartPoint="{Binding Converter={x:Static con:AppConverters.GridlineToStartPoint}}"
                                    EndPoint="{Binding Converter={x:Static con:AppConverters.GridlineToEndPoint}}" />
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </Grid>
            </paz:ZoomBorder>
        </ScrollViewer>
    </Grid>
</UserControl>
