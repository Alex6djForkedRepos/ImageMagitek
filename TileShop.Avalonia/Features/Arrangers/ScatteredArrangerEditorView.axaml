<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
			 xmlns:model="using:TileShop.Shared.Models"
			 xmlns:m="using:TileShop.AvaloniaUI.Models"
			 xmlns:con="using:TileShop.AvaloniaUI.Converters"
			 xmlns:b="using:TileShop.AvaloniaUI.Behaviors"
			 xmlns:i="using:Avalonia.Xaml.Interactivity"
			 xmlns:dd="using:TileShop.AvaloniaUI.DragDrop"
			 xmlns:id="using:Avalonia.Xaml.Interactions.Draggable"
			 xmlns:idd="using:Avalonia.Xaml.Interactions.DragAndDrop"
			 xmlns:vm="using:TileShop.AvaloniaUI.ViewModels"
			 xmlns:paz="using:Avalonia.Controls.PanAndZoom"
			 xmlns:fac="using:FluentAvalonia.Controls"
             mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
			 x:DataType="vm:ScatteredArrangerEditorViewModel"
			 x:CompileBindings="True"
             x:Class="TileShop.AvaloniaUI.Views.ScatteredArrangerEditorView">
	<UserControl.KeyBindings>
		<KeyBinding Gesture="G" Command="{Binding ToggleGridlineVisibilityCommand}" />
		<KeyBinding Gesture="E" Command="{Binding EditSelectionCommand}" />
		<KeyBinding Gesture="S" Command="{Binding ToggleSnapModeCommand}" />
		<KeyBinding Gesture="Delete" Command="{Binding DeleteElementSelectionCommand}" />
		<KeyBinding Gesture="Escape" Command="{Binding CancelOverlayCommand}" />
		<KeyBinding Gesture="Return" Command="{Binding ConfirmPendingOperationCommand}" />
		<KeyBinding Gesture="Ctrl+S" Command="{Binding SaveChangesCommand}" />
		<KeyBinding Gesture="Ctrl+Z" Command="{Binding UndoCommand}" />
		<KeyBinding Gesture="Ctrl+Y" Command="{Binding RedoCommand}" />
		<KeyBinding Gesture="Ctrl+A" Command="{Binding SelectAllCommand}" />
	</UserControl.KeyBindings>
	
	<Grid UseLayoutRounding="True" RowDefinitions="auto,*">
		<!--  Toolbar  -->
		<StackPanel
            Grid.Row="0"
            Margin="5,5,0,10"
            Orientation="Horizontal">

			<StackPanel.ContextMenu>
				<ContextMenu>
					<MenuItem Header="Show Symmetry Tools" Command="{Binding ToggleSymmetryToolsCommand}">
						<MenuItem.Icon>
							<CheckBox BorderThickness="0" IsHitTestVisible="False" IsChecked="{Binding AreSymmetryToolsEnabled}" />
						</MenuItem.Icon>
					</MenuItem>
				</ContextMenu>
			</StackPanel.ContextMenu>

			<!--  Tools  -->
			<StackPanel>
				<TextBlock HorizontalAlignment="Center" Text="Tools" />

				<StackPanel Orientation="Horizontal">
					<ToggleButton Command="{Binding ChangeToolCommand}" CommandParameter="{x:Static vm:ScatteredArrangerTool.Select}"
						IsChecked="{Binding ActiveTool, Mode=OneWay, Converter={x:Static con:AppConverters.EnumToBoolean}, ConverterParameter=Select}"
						ToolTip.Tip="Click and drag across Arranger to select a region">
						<PathIcon Foreground="{DynamicResource iconBrush}" Width="20" Height="20" Data="{StaticResource pathIconRectangularSelection}" />
					</ToggleButton>
					<ToggleButton Command="{Binding ChangeToolCommand}" CommandParameter="{x:Static vm:ScatteredArrangerTool.ApplyPalette}"
						IsChecked="{Binding ActiveTool, Mode=OneWay, Converter={x:Static con:AppConverters.EnumToBoolean}, ConverterParameter=ApplyPalette}"
						ToolTip.Tip="{Binding SelectedPalette.Name, StringFormat='Click on an Arranger element to apply the current palette (\{0\})'}">
						<PathIcon Foreground="{DynamicResource iconBrush}" Width="20" Height="20" Data="{StaticResource pathIconPaletteBrush}" RenderTransform="scaleY(-1)" />
					</ToggleButton>
					<ToggleButton Command="{Binding ChangeToolCommand}" CommandParameter="{x:Static vm:ScatteredArrangerTool.PickPalette}"
						IsChecked="{Binding ActiveTool, Mode=OneWay, Converter={x:Static con:AppConverters.EnumToBoolean}, ConverterParameter=PickPalette}"
						ToolTip.Tip="Click on an Arranger element to pick its associated palette">
						<PathIcon Foreground="{DynamicResource iconBrush}" Width="20" Height="20" Data="{StaticResource pathIconPalettePicker}" />
					</ToggleButton>
					<ToggleButton Command="{Binding ChangeToolCommand}" CommandParameter="{x:Static vm:ScatteredArrangerTool.InspectElement}"
						IsChecked="{Binding ActiveTool, Mode=OneWay, Converter={x:Static con:AppConverters.EnumToBoolean}, ConverterParameter=InspectElement}"
						ToolTip.Tip="Hover Arranger elements to inspect their properties">
						<PathIcon Foreground="{DynamicResource iconBrush}" Width="20" Height="20" Data="{StaticResource pathIconEye}" />
					</ToggleButton>

					<ToggleButton Command="{Binding ChangeToolCommand}" CommandParameter="{x:Static vm:ScatteredArrangerTool.RotateLeft}"
						IsChecked="{Binding ActiveTool, Mode=OneWay, Converter={x:Static con:AppConverters.EnumToBoolean}, ConverterParameter=RotateLeft}"
						IsVisible="{Binding AreSymmetryToolsEnabled}"
						ToolTip.Tip="Rotate Element's Display Left">
						<PathIcon Foreground="{DynamicResource iconBrush}" Width="20" Height="20" Data="{StaticResource pathIconRotateLeft}" />
					</ToggleButton>
					<ToggleButton Command="{Binding ChangeToolCommand}" CommandParameter="{x:Static vm:ScatteredArrangerTool.RotateRight}"
						IsChecked="{Binding ActiveTool, Mode=OneWay, Converter={x:Static con:AppConverters.EnumToBoolean}, ConverterParameter=RotateRight}"
						IsVisible="{Binding AreSymmetryToolsEnabled}"
						ToolTip.Tip="Rotate Element's Display Right">
						<PathIcon Foreground="{DynamicResource iconBrush}" Width="20" Height="20" Data="{StaticResource pathIconRotateRight}" />
					</ToggleButton>
					<ToggleButton Command="{Binding ChangeToolCommand}" CommandParameter="{x:Static vm:ScatteredArrangerTool.MirrorHorizontal}"
						IsChecked="{Binding ActiveTool, Mode=OneWay, Converter={x:Static con:AppConverters.EnumToBoolean}, ConverterParameter=MirrorHorizontal}"
						IsVisible="{Binding AreSymmetryToolsEnabled}"
						ToolTip.Tip="Mirror Element's Display Horizontally">
						<PathIcon Foreground="{DynamicResource iconBrush}" Width="20" Height="20" Data="{StaticResource pathIconMirrorHorizontal}" />
					</ToggleButton>
					<ToggleButton Command="{Binding ChangeToolCommand}" CommandParameter="{x:Static vm:ScatteredArrangerTool.MirrorVertical}"
						IsChecked="{Binding ActiveTool, Mode=OneWay, Converter={x:Static con:AppConverters.EnumToBoolean}, ConverterParameter=MirrorVertical}"
						IsVisible="{Binding AreSymmetryToolsEnabled}"
						ToolTip.Tip="Mirror Element's Display Vertically">
						<PathIcon Foreground="{DynamicResource iconBrush}" Width="20" Height="20" Data="{StaticResource pathIconMirrorVertical}" />
					</ToggleButton>
				</StackPanel>
			</StackPanel>

			<Border
                Margin="5,6,6,0"
                BorderBrush="{DynamicResource separatorBrush}"
                BorderThickness="1" />

			<StackPanel Margin="6,0,0,0" IsVisible="{Binding IsIndexedColor}">
				<TextBlock HorizontalAlignment="Center" Text="Palette" />
				<ComboBox Items="{Binding Palettes}" SelectedItem="{Binding SelectedPalette}">
					<ComboBox.ItemTemplate>
						<DataTemplate>
							<TextBlock Text="{Binding Name}" />
						</DataTemplate>
					</ComboBox.ItemTemplate>
				</ComboBox>
			</StackPanel>

			<Button
                Margin="5,0,0,0"
                VerticalAlignment="Bottom"
                VerticalContentAlignment="Center"
                Command="{Binding AssociatePaletteCommand}"
                ToolTip.Tip="Associate an existing Palette from this Project with this Arranger"
                IsVisible="{Binding IsIndexedColor}">
				<PathIcon Foreground="{DynamicResource iconBrush}" Width="20" Height="20" Data="{StaticResource pathIconPlusCircle}" />
			</Button>

			<Border
                Margin="6,6,6,0"
                BorderBrush="{DynamicResource separatorBrush}"
                BorderThickness="1"
                IsVisible="{Binding IsIndexedColor}" />

			<StackPanel>
				<TextBlock HorizontalAlignment="Center" Text="Grid" />
				<ToggleButton
                    Focusable="False"
                    IsChecked="{Binding ShowGridlines}"
                    ToolTip.Tip="Toggle gridline visibility (G)">
					<PathIcon Foreground="{DynamicResource iconBrush}" Width="20" Height="20" Data="{StaticResource pathIconGrid}" />
				</ToggleButton>
			</StackPanel>

			<StackPanel IsVisible="{Binding CanChangeSnapMode}" Margin="5,0,0,0">
				<TextBlock HorizontalAlignment="Center" Text="Snap" />
				<ToggleButton
                    Focusable="False"
                    IsChecked="{Binding SnapMode, Converter={x:Static con:AppConverters.SnapModeBoolean}}"
                    ToolTip.Tip="Snap Selection to Elements (S)">
					<PathIcon Foreground="{DynamicResource iconBrush}" Width="20" Height="20" Data="{StaticResource pathIconSnap}" />
				</ToggleButton>
			</StackPanel>

			<Border
                Margin="12,6,12,0"
                BorderBrush="{DynamicResource separatorBrush}"
                BorderThickness="1" />

			<StackPanel IsVisible="{Binding IsTiledLayout}">
				<TextBlock HorizontalAlignment="Center" Text="Resize" />

				<Button
                    Command="{Binding ResizeArrangerCommand}"
                    ToolTip.Tip="Resizes the Arranger">
					<PathIcon Foreground="{DynamicResource iconBrush}" Width="20" Height="20" Data="{StaticResource pathIconResize}" />
				</Button>
			</StackPanel>

			<StackPanel Margin="5,0,0,0">
				<TextBlock HorizontalAlignment="Center" Text="Edit" />

				<Button
                    Command="{Binding EditSelectionCommand}"
                    IsEnabled="{Binding CanEditSelection}"
                    ToolTip.Tip="Opens selection in the pixel editor (E)">
					<PathIcon Foreground="{DynamicResource iconBrush}" Width="20" Height="20" Data="{StaticResource pathIconEdit}" RenderTransform="scaleY(-1)" />
				</Button>
			</StackPanel>
		</StackPanel>

		<!--  Image Display  -->
		<ScrollViewer
            Grid.Row="1"
            Grid.Column="0"
            Focusable="True"
			KeyDown="OnKeyDown"
            HorizontalScrollBarVisibility="Auto"
            VerticalScrollBarVisibility="Auto">

			<paz:ZoomBorder x:Name="_zoomBorder" Stretch="None" PowerFactor="2" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
				<Grid>
					<!--  Image, Selection, and Paste Overlay  -->
					<Canvas
						x:Name="_overlayCanvas"
						Classes="arrangerDrop"
						Width="{Binding BitmapAdapter.Width}"
						Height="{Binding BitmapAdapter.Height}"
						PointerMoved="OnPointerMoved" PointerExited="OnPointerExited" PointerPressed="OnPointerPressed" PointerReleased="OnPointerReleased"
						ClipToBounds="True">

						<!--  Backdrop  -->
						<Rectangle
							x:Name="_arrangerBackdrop"
							Width="{Binding BitmapAdapter.Width}" Height="{Binding BitmapAdapter.Height}"
							Stretch="None"
							ClipToBounds="True"
							Fill="{DynamicResource CheckeredBrush}"/>

						<!--  Arranged Image  -->
						<Image x:Name="_image" Classes="pixel" Source="{Binding BitmapAdapter.Bitmap}"
							   PointerMoved="OnPointerMoved" PointerExited="OnPointerExited" PointerPressed="OnPointerPressed" PointerReleased="OnPointerReleased" />

						<!--  Selection Overlay  -->
						<Rectangle
							Classes="arrangerDrag animatedBorder selection"
							Canvas.Left="{Binding Selection.SelectionRect.SnappedLeft}"
							Canvas.Top="{Binding Selection.SelectionRect.SnappedTop}"
							Width="{Binding Selection.SelectionRect.SnappedWidth}"
							Height="{Binding Selection.SelectionRect.SnappedHeight}"
							Cursor="Hand"
							IsVisible="{Binding Selection.HasSelection}" />

						<!--  Paste Image  -->
						<Image
							Classes="arrangerDrag pixel"
							x:Name="pasteImage"
							Source="{Binding Paste.OverlayImage.Bitmap}"
							Canvas.Left="{Binding Paste.Rect.SnappedLeft}"
							Canvas.Top="{Binding Paste.Rect.SnappedTop}"
							Width="{Binding Paste.Rect.SnappedWidth, FallbackValue=0}"
							Height="{Binding Paste.Rect.SnappedHeight, FallbackValue=0}"
							IsHitTestVisible="True"
							Cursor="Hand" />

						<!--  Paste Overlay  -->
						<Rectangle
							Classes="animatedBorder paste"
							Canvas.Left="{Binding Paste.Rect.SnappedLeft}"
							Canvas.Top="{Binding Paste.Rect.SnappedTop}"
							Width="{Binding Paste.Rect.SnappedWidth, FallbackValue=0}"
							Height="{Binding Paste.Rect.SnappedHeight, FallbackValue=0}"
							IsVisible="{Binding Paste, Converter={x:Static ObjectConverters.IsNotNull}}"/>
					</Canvas>

					<!--  Gridline Overlay  -->
					<ItemsControl
						IsHitTestVisible="False"
						Items="{Binding Gridlines}"
						ClipToBounds="True"
						MaxWidth="{Binding BitmapAdapter.Width}"
						MaxHeight="{Binding BitmapAdapter.Height}"
						IsVisible="{Binding ShowGridlines}">
						<ItemsControl.ItemsPanel>
							<ItemsPanelTemplate>
								<Canvas />
							</ItemsPanelTemplate>
						</ItemsControl.ItemsPanel>
						<ItemsControl.ItemTemplate>
							<DataTemplate DataType="{x:Type model:Gridline}">
								<Line
									Stroke="#B0000000"
									StrokeThickness="0.40"
									UseLayoutRounding="True"
									StartPoint="{Binding Converter={x:Static con:AppConverters.GridlineToStartPoint}}"
									EndPoint="{Binding Converter={x:Static con:AppConverters.GridlineToEndPoint}}">
								</Line>
							</DataTemplate>
						</ItemsControl.ItemTemplate>
					</ItemsControl>
				</Grid>
			</paz:ZoomBorder>
		</ScrollViewer>
	</Grid>
</UserControl>
