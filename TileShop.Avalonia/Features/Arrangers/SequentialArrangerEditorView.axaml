<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
			 xmlns:model="using:TileShop.Shared.Models"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
             x:Class="TileShop.AvaloniaUI.Views.SequentialArrangerEditorView">

	<UserControl.KeyBindings>
		<KeyBinding Gesture="OemPlus" Command="{Binding MoveByteDown}" />
		<KeyBinding Gesture="Add" Command="{Binding MoveByteDown}" />
		<KeyBinding Gesture="Subtract" Command="{Binding MoveByteUp}" />
		<KeyBinding Gesture="OemMinus" Command="{Binding MoveByteUp}" />
		<KeyBinding Gesture="Down" Command="{Binding MoveRowDown}" />
		<KeyBinding Gesture="Up" Command="{Binding MoveRowUp}" />
		<KeyBinding Gesture="Right" Command="{Binding MoveColumnRight}" />
		<KeyBinding Gesture="Left" Command="{Binding MoveColumnLeft}" />
		<KeyBinding Gesture="PageDown" Command="{Binding MovePageDown}" />
		<KeyBinding Gesture="PageUp" Command="{Binding MovePageUp}" />
		<KeyBinding Gesture="Home" Command="{Binding MoveHome}" />
		<KeyBinding Gesture="End" Command="{Binding MoveEnd}" />
		<KeyBinding Gesture="OemQuestion" Command="{Binding ExpandWidth}" />
		<KeyBinding Gesture="OemPeriod" Command="{Binding ShrinkWidth}" />
		<KeyBinding Gesture="L" Command="{Binding ShrinkHeight}" />
		<KeyBinding Gesture="OemSemicolon" Command="{Binding ExpandHeight}" />
		<KeyBinding Gesture="F" Command="{Binding SelectNextCodec}" />
		<KeyBinding Gesture="D" Command="{Binding SelectPreviousCodec}" />
		<KeyBinding Gesture="Z" Command="{Binding ZoomIn}" />
		<KeyBinding Gesture="X" Command="{Binding ZoomOut}" />
		<KeyBinding Gesture="G" Command="{Binding ToggleGridlineVisibility}" />
		<KeyBinding Gesture="J" Command="{Binding JumpToOffset}" />
		<KeyBinding Gesture="E" Command="{Binding EditSelection}" />
		<KeyBinding Gesture="S" Command="{Binding ToggleSnapMode}" />
		<KeyBinding Gesture="Escape" Command="{Binding CancelOverlay}" />
		<KeyBinding Gesture="Ctrl+A" Command="{Binding SelectAll}" />
	</UserControl.KeyBindings>

	<Grid UseLayoutRounding="True" RowDefinitions="auto,*">
		
		<!--  Toolbar  -->
		<Border BorderThickness="0,0,0,2">

			<Grid RowDefinitions="auto,auto">
				<!--  Top Toolbar  -->
				<StackPanel
                    Grid.Row="0"
                    Margin="0,5,0,0"
                    Orientation="Horizontal">

					<!--  Codec Tools  -->
					<StackPanel>
						<TextBlock HorizontalAlignment="Center" Text="Codec" />

						<StackPanel Orientation="Horizontal">
							<ComboBox
                                Height="35"
                                MinWidth="180"
                                Focusable="False"
                                Items="{Binding CodecNames}"
                                SelectedItem="{Binding SelectedCodecName}"
                                ToolTip.Tip="Active Codec (F, D)" />

							<NumericUpDown
                                Margin="2,0,0,0"
                                IsEnabled="{Binding CanResize}"
								Increment="{Binding ElementWidthIncrement}"
                                Minimum="{Binding ElementWidthIncrement}"
                                ToolTip.Tip="Element width in pixels"
								IsVisible="{Binding IsTiledLayout}"
                                Value="{Binding TiledElementWidth}" />

							<NumericUpDown
                                Margin="2,0,0,0"
                                IsEnabled="{Binding CanResize}"
                                Increment="{Binding ElementHeightIncrement}"
                                Minimum="{Binding ElementHeightIncrement}"
                                ToolTip.Tip="Element height in pixels"
                                IsVisible="{Binding IsTiledLayout}"
                                Value="{Binding TiledElementHeight}" />

						</StackPanel>
					</StackPanel>

					<Border
                        Margin="8,6,6,0"
                        BorderBrush="{DynamicResource separatorBrush}"
                        BorderThickness="1" />

					<!--  Arranger Tools  -->
					<StackPanel>
						<TextBlock HorizontalAlignment="Center" Text="Arranger" />
						<StackPanel Orientation="Horizontal">

							<ComboBox
                                Height="35"
                                Focusable="False"
                                Items="{Binding Palettes}"
                                SelectedItem="{Binding SelectedPalette}"
                                IsVisible="{Binding Palettes.Count}">
								<ComboBox.ItemTemplate>
									<DataTemplate>
										<TextBlock Text="{Binding Name}" />
									</DataTemplate>
								</ComboBox.ItemTemplate>
							</ComboBox>

							<!--  Resize Arranger Dimensions in Elements  -->
							<NumericUpDown
                                Margin="2,0,0,0"
                                Increment="{Binding ArrangerWidthIncrement}"
                                Minimum="{Binding ArrangerWidthIncrement}"
                                ToolTip.Tip="Arranger width in elements (/, .)"
                                IsVisible="{Binding IsTiledLayout}"
                                Value="{Binding TiledArrangerWidth}" />

							<NumericUpDown
                                Margin="2,0,0,0"
                                Increment="{Binding ArrangerHeightIncrement}"
                                Minimum="{Binding ArrangerHeightIncrement}"
                                ToolTip.Tip="Arranger height in elements (;, L)"
                                IsVisible="{Binding IsTiledLayout}"
                                Value="{Binding TiledArrangerHeight}" />

							<!--  Resize Arranger Dimensions in Pixels  -->
							<NumericUpDown
                                Margin="2,0,0,0"
                                IsEnabled="{Binding CanResize}"
                                Increment="{Binding ElementWidthIncrement}"
                                Minimum="{Binding ElementWidthIncrement}"
                                ToolTip.Tip="Arranger width in pixels (/, .)"
                                IsVisible="{Binding IsSingleLayout}"
                                Value="{Binding LinearArrangerWidth}" />

							<NumericUpDown
                                Margin="2,0,0,0"
                                IsEnabled="{Binding CanResize}"
                                Increment="{Binding ElementHeightIncrement}"
                                Minimum="{Binding ElementHeightIncrement}"
                                ToolTip.Tip="Arranger height in pixels (;, L)"
                                IsVisible="{Binding IsSingleLayout}"
                                Value="{Binding LinearArrangerHeight}" />

							<!--  Element Layout  -->
							
							<!--<ui:DropDownButton
                                Margin="2,0,0,0"
                                VerticalAlignment="Top"
                                Style="{StaticResource toolbarDropDownButtonStyle}"
                                ToolTip="Element Layout Pattern"
                                Visibility="{Binding IsTiledLayout, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}">
								<ui:DropDownButton.Content>
									<Image Style="{StaticResource iconElementLayout}" />
								</ui:DropDownButton.Content>

								<ui:DropDownButton.Flyout>
									<ui:MenuFlyout Placement="BottomEdgeAlignedLeft">
										<MenuItem
                                            s:View.ActionTarget="{Binding Data, Source={StaticResource editorProxy}}"
                                            Command="{s:Action ApplyDefaultElementLayout}"
                                            Header="Default" />
										<MenuItem
                                            Header="Saved Layouts"
                                            ItemsSource="{Binding TileLayoutNames}"
                                            UsesItemContainerTemplate="True"
                                            Visibility="{Binding TileLayoutNames.Count, Converter={StaticResource CountToVisibilityConverter}}">
											<MenuItem.Resources>
												--><!--  x:Key vs DataType issue here: https://github.com/dotnet/wpf/issues/2404  --><!--
												<ItemContainerTemplate x:Key="{ItemContainerTemplateKey {x:Type sys:String}}">
													<MenuItem
                                                        s:View.ActionTarget="{Binding Data, Source={StaticResource editorProxy}}"
                                                        Command="{s:Action ChangeElementLayout}"
                                                        CommandParameter="{Binding}"
                                                        Header="{Binding}" />
												</ItemContainerTemplate>
											</MenuItem.Resources>
										</MenuItem>
										<MenuItem
                                            s:View.ActionTarget="{Binding Data, Source={StaticResource editorProxy}}"
                                            Command="{s:Action CreateCustomLayout}"
                                            Header="Custom Layout..." />
									</ui:MenuFlyout>
								</ui:DropDownButton.Flyout>
							</ui:DropDownButton>-->
						</StackPanel>
					</StackPanel>

					<Border
                        Margin="5,6,5,0"
                        BorderBrush="{DynamicResource separatorBrush}"
                        BorderThickness="1" />

					<StackPanel>
						<StackPanel Orientation="Vertical">
							<TextBlock HorizontalAlignment="Center" Text="Zoom" />
							<Slider
                                MinWidth="100"
                                Margin="5,0,5,0"
                                Focusable="False"
                                Maximum="{Binding MaxZoom}"
                                Minimum="{Binding MinZoom}"
                                ToolTip.Tip="Zoom (Z, X)"
                                Value="{Binding Zoom}" />
						</StackPanel>
					</StackPanel>

					<!--<StackPanel>
						<TextBlock HorizontalAlignment="Center" Text="Grid" />

						<ToggleButton
                            Focusable="False"
                            IsChecked="{Binding ShowGridlines}"
                            ToolTip.Tip="Toggle gridline visibility (G)">
							<Image Style="{StaticResource iconGrid}" />
						</ToggleButton>
					</StackPanel>

					<StackPanel Margin="2,0,0,0">
						<TextBlock HorizontalAlignment="Center" Text="Snap" />

						<ToggleButton
                            Focusable="False"
                            IsChecked="{Binding SnapMode, Converter={StaticResource SnapModeBooleanConverter}}"
                            ToolTip.Tip="Snap Selection to Elements (S)"
                            Visibility="{Binding CanChangeSnapMode, Converter={StaticResource BooleanToVisibilityConverter}}">
							<Image Style="{StaticResource iconSnap}" />
						</ToggleButton>
					</StackPanel>

					<StackPanel Margin="2,0,0,0">
						<TextBlock HorizontalAlignment="Center" Text="Edit" />

						<Button
                            Click="{Binding EditSelection}"
                            Focusable="False"
                            IsEnabled="{Binding CanEditSelection}"
                            ToolTip.Tip="Opens selection in the pixel editor (E)">
							<Image Style="{StaticResource iconEdit}" />
						</Button>
					</StackPanel>-->
				</StackPanel>

				<!--  Bottom Toolbar  -->
				<Grid Grid.Row="1">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="auto" />
						<ColumnDefinition Width="*" />
					</Grid.ColumnDefinitions>
					<TextBlock
                        MinWidth="60"
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"
                        Text="{Binding FileOffset, StringFormat={}{0:X}}"
                        TextAlignment="Right"
                        ToolTip.Tip="Current File Offset in Hexadecimal" />
					<Slider
                        Grid.Column="1"
                        Margin="10,0,10,0"
                        Focusable="False"
                        IsSnapToTickEnabled="True"
                        LargeChange="{Binding ArrangerPageSize}"
                        Maximum="{Binding MaxFileDecodingOffset}"
                        Minimum="0"
                        SmallChange="{Binding ArrangerPageSize}"
                        TickFrequency="{Binding ArrangerPageSize}"
                        Value="{Binding FileOffset}" />
				</Grid>

			</Grid>
		</Border>

		<!--  Image Display  -->
		<ScrollViewer
            Grid.Row="1"
            Grid.Column="0"
            Focusable="True"
            HorizontalScrollBarVisibility="Auto"
            VerticalScrollBarVisibility="Auto">

			<!--Margin="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ScrollViewer}}, Converter={StaticResource ScrollViewerToMarginStringConverter}}"-->
			<Grid
                HorizontalAlignment="Left"
                VerticalAlignment="Top">
				<Grid.Resources>
					<ScaleTransform x:Key="transform" ScaleX="{Binding Zoom}" ScaleY="{Binding Zoom}" />
				</Grid.Resources>

				<Grid.ContextMenu>
					<ContextMenu>
						<MenuItem Command="{Binding SelectAll}" Header="Select All" />
						<MenuItem
                            Command="{Binding NewScatteredArrangerFromSelection}"
                            Header="New ScatteredArranger From Selection..."
                            IsEnabled="{Binding Overlay.State, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter=Selected}"
                            IsVisible="{Binding IsTiledLayout}" />
						<MenuItem
                            Command="{Binding NewScatteredArrangerFromImage}"
                            Header="New ScatteredArranger From Image..."
                            IsVisible="{Binding IsSingleLayout}" />
					</ContextMenu>
				</Grid.ContextMenu>

				<!--  Arranger Image  -->
				<Image Stretch="None" RenderOptions.BitmapInterpolationMode="Default" Source="{Binding BitmapAdapter.Bitmap, Mode=OneWay}" RenderTransformOrigin="0,0" RenderTransform="{StaticResource transform}" />

				<!--  Selection and Paste Overlay  -->
				<!--<Canvas
                    x:Name="overlayCanvas"
                    Grid.Row="0"
                    Grid.Column="0"
                    Panel.ZIndex="2"
					RenderTransform="{StaticResource transform}">
					<Rectangle
                        Canvas.Left="{Binding Selection.SelectionRect.SnappedLeft}"
                        Canvas.Top="{Binding Selection.SelectionRect.SnappedTop}"
                        Width="{Binding Selection.SelectionRect.SnappedWidth}"
                        Height="{Binding Selection.SelectionRect.SnappedHeight}"
                        Fill="{StaticResource editSelectionFillBrush}"
                        Stroke="Black"
                        StrokeDashArray="3 2"
                        StrokeThickness="0.3"
                        IsVisible="{Binding Selection.HasSelection}" />
				</Canvas>-->

				<!--  Gridline Overlay  -->
				<!--<ItemsControl
                    Grid.Row="0"
                    Grid.Column="0"
                    IsHitTestVisible="False"
                    Items="{Binding Gridlines}"
                    IsVisible="{Binding ShowGridlines}">
					<ItemsControl.ItemsPanel>
						<ItemsPanelTemplate>
							<Canvas />
						</ItemsPanelTemplate>
					</ItemsControl.ItemsPanel>
					<ItemsControl.ItemTemplate>
						<DataTemplate DataType="{x:Type model:Gridline}">
							<Line
                                Stroke="Black"
                                StrokeThickness="1"
                                UseLayoutRounding="True"
                                X1="{Binding X1}"
                                X2="{Binding X2}"
                                Y1="{Binding Y1}"
                                Y2="{Binding Y2}">
								<Line.RenderTransform>
									<ScaleTransform ScaleX="1" ScaleY="1" />
								</Line.RenderTransform>
							</Line>
						</DataTemplate>
					</ItemsControl.ItemTemplate>
				</ItemsControl>-->
			</Grid>

		</ScrollViewer>
	</Grid>
</UserControl>
