<UserControl
    x:Class="TileShop.UI.Views.DirectPixelEditorView"
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:con="using:TileShop.UI.Converters"
    xmlns:fac="using:FluentAvalonia.UI.Controls"
    xmlns:m="using:TileShop.UI.Models"
    xmlns:model="using:TileShop.Shared.Models"
    xmlns:paz="using:Avalonia.Controls.PanAndZoom"
    xmlns:vm="using:TileShop.UI.ViewModels"
    x:Name="pixelEditor"
    x:CompileBindings="True"
    x:DataType="vm:DirectPixelEditorViewModel">
    <UserControl.KeyBindings>
        <KeyBinding Command="{Binding ToggleGridlineVisibilityCommand}" Gesture="G" />
        <KeyBinding Command="{Binding CancelOverlayCommand}" Gesture="Escape" />
        <KeyBinding Command="{Binding ConfirmPendingOperationCommand}" Gesture="Return" />
        <KeyBinding Command="{Binding SaveChangesCommand}" Gesture="Ctrl+S" />
        <KeyBinding Command="{Binding UndoCommand}" Gesture="Ctrl+Z" />
        <KeyBinding Command="{Binding RedoCommand}" Gesture="Ctrl+Y" />
        <KeyBinding Command="{Binding SelectAllCommand}" Gesture="Ctrl+A" />
        <KeyBinding Command="{Binding ModifyGridSettingsCommand}" Gesture="Ctrl+G" />
    </UserControl.KeyBindings>

    <UserControl.ContextMenu>
        <ContextMenu>
            <MenuItem Command="{Binding SelectAllCommand}" Header="Select All" />
            <MenuItem Command="{Binding ModifyGridSettingsCommand}" Header="Grid Settings..." />
        </ContextMenu>
    </UserControl.ContextMenu>

    <Grid ColumnDefinitions="*,*" RowDefinitions="auto,auto,*" UseLayoutRounding="True">

        <!--  Toolbar  -->
        <StackPanel Grid.ColumnSpan="2" ContextMenu="{StaticResource contextMenu}" Orientation="Horizontal">
            <StackPanel>
                <TextBlock HorizontalAlignment="Center" Text="Grid" />
                <ToggleButton Focusable="False" IsChecked="{Binding GridSettings.ShowGridlines}" ToolTip.Tip="Toggle gridline visibility (G)">
                    <PathIcon Classes="tool" Data="{StaticResource pathIconGrid}" />
                </ToggleButton>
            </StackPanel>

            <Border Margin="5,6,5,4" BorderBrush="{DynamicResource separatorBrush}" BorderThickness="1" />

            <!--  Tools  -->
            <StackPanel>
                <TextBlock HorizontalAlignment="Center" Text="Tools" />

                <StackPanel Orientation="Horizontal">
                    <RadioButton
                        Classes="tool"
                        Command="{Binding ChangeToolCommand}"
                        CommandParameter="{x:Static vm:PixelTool.Select}"
                        IsChecked="{Binding ActiveTool, Mode=OneWay, Converter={x:Static con:AppConverters.EnumToBoolean}, ConverterParameter=Select}"
                        ToolTip.Tip="Rectangular Selection Tool">
                        <PathIcon Classes="tool" Data="{StaticResource pathIconRectangularSelection}" />
                    </RadioButton>
                    <RadioButton
                        Classes="tool"
                        Command="{Binding ChangeToolCommand}"
                        CommandParameter="{x:Static vm:PixelTool.Pencil}"
                        IsChecked="{Binding ActiveTool, Mode=OneWay, Converter={x:Static con:AppConverters.EnumToBoolean}, ConverterParameter=Pencil}"
                        ToolTip.Tip="Pencil Tool">
                        <PathIcon Classes="tool" Data="{StaticResource pathIconPencil}" />
                    </RadioButton>
                    <RadioButton
                        Classes="tool"
                        Command="{Binding ChangeToolCommand}"
                        CommandParameter="{x:Static vm:PixelTool.ColorPicker}"
                        IsChecked="{Binding ActiveTool, Mode=OneWay, Converter={x:Static con:AppConverters.EnumToBoolean}, ConverterParameter=ColorPicker}"
                        ToolTip.Tip="Color Picker Tool">
                        <PathIcon Classes="tool vflip" Data="{StaticResource pathIconColorPicker}" />
                    </RadioButton>
                    <RadioButton
                        Classes="tool"
                        Command="{Binding ChangeToolCommand}"
                        CommandParameter="{x:Static vm:PixelTool.FloodFill}"
                        IsChecked="{Binding ActiveTool, Mode=OneWay, Converter={x:Static con:AppConverters.EnumToBoolean}, ConverterParameter=FloodFill}"
                        ToolTip.Tip="Flood Fill Tool">
                        <PathIcon Classes="tool vflip" Data="{StaticResource pathIconFloodFill}" />
                    </RadioButton>
                </StackPanel>
            </StackPanel>

            <StackPanel>
                <TextBlock HorizontalAlignment="Center" Text="Active Colors" />
                <StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
                    <fac:ColorPickerButton Height="40" ShowAcceptDismissButtons="False" Color="{Binding PrimaryColor, Converter={x:Static con:AppConverters.ColorRgba32ToMediaColor}}" />
                    <fac:ColorPickerButton Height="40" ShowAcceptDismissButtons="False" Color="{Binding SecondaryColor, Converter={x:Static con:AppConverters.ColorRgba32ToMediaColor}}" />
                </StackPanel>
            </StackPanel>
        </StackPanel>

        <!--  Image Display  -->
        <ScrollViewer
            Grid.Row="2"
            Grid.Column="0"
            Grid.ColumnSpan="2"
            Focusable="True"
            HorizontalScrollBarVisibility="Auto"
            VerticalScrollBarVisibility="Auto">

            <paz:ZoomBorder
                x:Name="_zoomBorder"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                PowerFactor="2"
                Stretch="None">
                <Grid>
                    <!--  Separate backing grid to ensure the Canvas uses drawing tools and doesn't popup a ContextMenu  -->
                    <Grid Background="Transparent" ContextMenu="{StaticResource contextMenu}" />

                    <Canvas
                        x:Name="_overlayCanvas"
                        MaxWidth="{Binding BitmapAdapter.Width}"
                        MaxHeight="{Binding BitmapAdapter.Height}"
                        Background="{Binding GridSettings.BackgroundBrush}"
                        Classes="arrangerDrop"
                        ClipToBounds="True"
                        PointerExited="OnPointerExited"
                        PointerMoved="OnPointerMoved"
                        PointerPressed="OnPointerPressed"
                        PointerReleased="OnPointerReleased">

                        <!--  Editable Image  -->
                        <Image x:Name="_image" Classes="pixel" IsHitTestVisible="False" Source="{Binding BitmapAdapter.Bitmap}" />

                        <Rectangle
                            Canvas.Left="{Binding Selection.SelectionRect.SnappedLeft}"
                            Canvas.Top="{Binding Selection.SelectionRect.SnappedTop}"
                            Width="{Binding Selection.SelectionRect.SnappedWidth}"
                            Height="{Binding Selection.SelectionRect.SnappedHeight}"
                            Classes="arrangerDrag animatedBorder selection"
                            IsVisible="{Binding Selection.HasSelection}" />

                        <Image
                            x:Name="pasteImage"
                            Canvas.Left="{Binding Paste.Rect.SnappedLeft}"
                            Canvas.Top="{Binding Paste.Rect.SnappedTop}"
                            Width="{Binding Paste.Rect.SnappedWidth, FallbackValue=0}"
                            Height="{Binding Paste.Rect.SnappedHeight, FallbackValue=0}"
                            Classes="arrangerDrag pixel"
                            IsHitTestVisible="{Binding !Paste.IsDragging}"
                            Source="{Binding Paste.OverlayImage.Bitmap}" />

                        <Rectangle
                            Canvas.Left="{Binding Paste.Rect.SnappedLeft}"
                            Canvas.Top="{Binding Paste.Rect.SnappedTop}"
                            Width="{Binding Paste.Rect.SnappedWidth, FallbackValue=0}"
                            Height="{Binding Paste.Rect.SnappedHeight, FallbackValue=0}"
                            Classes="animatedBorder paste" />
                    </Canvas>

                    <!--  Gridline Overlay  -->
                    <ItemsControl
                        MaxWidth="{Binding BitmapAdapter.Width}"
                        MaxHeight="{Binding BitmapAdapter.Height}"
                        ClipToBounds="True"
                        IsHitTestVisible="False"
                        IsVisible="{Binding GridSettings.ShowGridlines}"
                        Items="{Binding GridSettings.Gridlines}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <Canvas IsHitTestVisible="False" />
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="{x:Type model:Gridline}">
                                <Line
                                    IsHitTestVisible="False"
                                    Stroke="{ReflectionBinding #_zoomBorder.DataContext.GridSettings.LineColor, Converter={x:Static con:AppConverters.ColorToBrush}}"
                                    StrokeThickness="0.40"
                                    UseLayoutRounding="True"
                                    StartPoint="{Binding Converter={x:Static con:AppConverters.GridlineToStartPoint}}"
                                    EndPoint="{Binding Converter={x:Static con:AppConverters.GridlineToEndPoint}}" />
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </Grid>
            </paz:ZoomBorder>
        </ScrollViewer>
    </Grid>
</UserControl>
