<UserControl
    x:Class="TileShop.UI.Views.ScatteredArrangerEditorView"
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:con="using:TileShop.UI.Converters"
    xmlns:fac="using:FluentAvalonia.Controls"
    xmlns:i="using:Avalonia.Xaml.Interactivity"
    xmlns:ia="using:Avalonia.Xaml.Interactions.Core"
    xmlns:m="using:TileShop.UI.Models"
    xmlns:model="using:TileShop.Shared.Models"
    xmlns:paz="using:Avalonia.Controls.PanAndZoom"
    xmlns:vm="using:TileShop.UI.ViewModels"
    x:Name="control"
    x:CompileBindings="True"
    x:DataType="vm:ScatteredArrangerEditorViewModel">
    <UserControl.KeyBindings>
        <KeyBinding Command="{Binding ToggleGridlineVisibilityCommand}" Gesture="G" />
        <KeyBinding Command="{Binding EditSelectionCommand}" Gesture="E" />
        <KeyBinding Command="{Binding ToggleSnapModeCommand}" Gesture="S" />
        <KeyBinding Command="{Binding DeleteElementSelectionCommand}" Gesture="Delete" />
        <KeyBinding Command="{Binding CancelOverlayCommand}" Gesture="Escape" />
        <KeyBinding Command="{Binding ConfirmPendingOperationCommand}" Gesture="Return" />
        <KeyBinding Command="{Binding SaveChangesCommand}" Gesture="Ctrl+S" />
        <KeyBinding Command="{Binding UndoCommand}" Gesture="Ctrl+Z" />
        <KeyBinding Command="{Binding RedoCommand}" Gesture="Ctrl+Y" />
        <KeyBinding Command="{Binding SelectAllCommand}" Gesture="Ctrl+A" />
        <KeyBinding Command="{Binding ModifyGridSettingsCommand}" Gesture="Ctrl+G" />
    </UserControl.KeyBindings>

    <UserControl.ContextMenu>
        <ContextMenu>
            <MenuItem Command="{Binding SelectAllCommand}" Header="Select All" />
            <MenuItem Command="{Binding ModifyGridSettingsCommand}" Header="Grid Settings..." />
            <MenuItem Command="{Binding ToggleSymmetryToolsCommand}" Header="Show Symmetry Tools">
                <i:Interaction.Behaviors>
                    <ia:DataTriggerBehavior Binding="{ReflectionBinding #control.DataContext.AreSymmetryToolsEnabled}" Value="True">
                        <ia:ChangePropertyAction PropertyName="Icon">
                            <ia:ChangePropertyAction.Value>
                                <PathIcon Classes="menu" Data="{StaticResource pathIconCheckedBox}" />
                            </ia:ChangePropertyAction.Value>
                        </ia:ChangePropertyAction>
                    </ia:DataTriggerBehavior>
                    <ia:DataTriggerBehavior Binding="{ReflectionBinding #control.DataContext.AreSymmetryToolsEnabled}" Value="False">
                        <ia:ChangePropertyAction PropertyName="Icon">
                            <ia:ChangePropertyAction.Value>
                                <PathIcon Classes="menu" Data="{StaticResource pathIconUncheckedBox}" />
                            </ia:ChangePropertyAction.Value>
                        </ia:ChangePropertyAction>
                    </ia:DataTriggerBehavior>
                </i:Interaction.Behaviors>
            </MenuItem>
        </ContextMenu>
    </UserControl.ContextMenu>

    <Grid RowDefinitions="auto,*" UseLayoutRounding="True">
        <!--  Toolbar  -->
        <StackPanel Grid.Row="0" Margin="5,5,0,10" Orientation="Horizontal">
            <!--  Tools  -->
            <StackPanel>
                <TextBlock HorizontalAlignment="Center" Text="Tools" />

                <StackPanel Orientation="Horizontal">
                    <RadioButton
                        Classes="tool"
                        Command="{Binding ChangeToolCommand}"
                        CommandParameter="{x:Static vm:ScatteredArrangerTool.Select}"
                        IsChecked="{Binding ActiveTool, Mode=OneWay, Converter={x:Static con:AppConverters.EnumToBoolean}, ConverterParameter=Select}"
                        ToolTip.Tip="Click and drag across Arranger to select a region or hold Ctrl to quickly drag single elements">
                        <PathIcon Classes="tool" Data="{StaticResource pathIconRectangularSelection}" />
                    </RadioButton>
                    <RadioButton
                        Classes="tool"
                        Command="{Binding ChangeToolCommand}"
                        CommandParameter="{x:Static vm:ScatteredArrangerTool.ApplyPalette}"
                        IsChecked="{Binding ActiveTool, Mode=OneWay, Converter={x:Static con:AppConverters.EnumToBoolean}, ConverterParameter=ApplyPalette}"
                        ToolTip.Tip="{Binding SelectedPalette.Name, StringFormat='Click on an Arranger element to apply the current palette (\{0\})'}">
                        <PathIcon Classes="tool vflip" Data="{StaticResource pathIconPaletteBrush}" />
                    </RadioButton>
                    <RadioButton
                        Classes="tool"
                        Command="{Binding ChangeToolCommand}"
                        CommandParameter="{x:Static vm:ScatteredArrangerTool.PickPalette}"
                        IsChecked="{Binding ActiveTool, Mode=OneWay, Converter={x:Static con:AppConverters.EnumToBoolean}, ConverterParameter=PickPalette}"
                        ToolTip.Tip="Click on an Arranger element to pick its associated palette">
                        <PathIcon Classes="tool" Data="{StaticResource pathIconPalettePicker}" />
                    </RadioButton>
                    <RadioButton
                        Classes="tool"
                        Command="{Binding ChangeToolCommand}"
                        CommandParameter="{x:Static vm:ScatteredArrangerTool.InspectElement}"
                        IsChecked="{Binding ActiveTool, Mode=OneWay, Converter={x:Static con:AppConverters.EnumToBoolean}, ConverterParameter=InspectElement}"
                        ToolTip.Tip="Hover Arranger elements to inspect their properties">
                        <PathIcon Classes="tool" Data="{StaticResource pathIconEye}" />
                    </RadioButton>

                    <RadioButton
                        Classes="tool"
                        Command="{Binding ChangeToolCommand}"
                        CommandParameter="{x:Static vm:ScatteredArrangerTool.RotateLeft}"
                        IsChecked="{Binding ActiveTool, Mode=OneWay, Converter={x:Static con:AppConverters.EnumToBoolean}, ConverterParameter=RotateLeft}"
                        IsVisible="{Binding AreSymmetryToolsEnabled}"
                        ToolTip.Tip="Rotate Element's Display Left">
                        <PathIcon Classes="tool" Data="{StaticResource pathIconRotateLeft}" />
                    </RadioButton>
                    <RadioButton
                        Classes="tool"
                        Command="{Binding ChangeToolCommand}"
                        CommandParameter="{x:Static vm:ScatteredArrangerTool.RotateRight}"
                        IsChecked="{Binding ActiveTool, Mode=OneWay, Converter={x:Static con:AppConverters.EnumToBoolean}, ConverterParameter=RotateRight}"
                        IsVisible="{Binding AreSymmetryToolsEnabled}"
                        ToolTip.Tip="Rotate Element's Display Right">
                        <PathIcon Classes="tool" Data="{StaticResource pathIconRotateRight}" />
                    </RadioButton>
                    <RadioButton
                        Classes="tool"
                        Command="{Binding ChangeToolCommand}"
                        CommandParameter="{x:Static vm:ScatteredArrangerTool.MirrorHorizontal}"
                        IsChecked="{Binding ActiveTool, Mode=OneWay, Converter={x:Static con:AppConverters.EnumToBoolean}, ConverterParameter=MirrorHorizontal}"
                        IsVisible="{Binding AreSymmetryToolsEnabled}"
                        ToolTip.Tip="Mirror Element's Display Horizontally">
                        <PathIcon Classes="tool" Data="{StaticResource pathIconMirrorHorizontal}" />
                    </RadioButton>
                    <RadioButton
                        Classes="tool"
                        Command="{Binding ChangeToolCommand}"
                        CommandParameter="{x:Static vm:ScatteredArrangerTool.MirrorVertical}"
                        IsChecked="{Binding ActiveTool, Mode=OneWay, Converter={x:Static con:AppConverters.EnumToBoolean}, ConverterParameter=MirrorVertical}"
                        IsVisible="{Binding AreSymmetryToolsEnabled}"
                        ToolTip.Tip="Mirror Element's Display Vertically">
                        <PathIcon Classes="tool" Data="{StaticResource pathIconMirrorVertical}" />
                    </RadioButton>
                </StackPanel>
            </StackPanel>

            <Border Margin="5,6,6,0" BorderBrush="{DynamicResource separatorBrush}" BorderThickness="1" />

            <StackPanel Margin="6,0,0,0" IsVisible="{Binding IsIndexedColor}">
                <TextBlock HorizontalAlignment="Center" Text="Palette" />
                <StackPanel Orientation="Horizontal">
                    <ComboBox MaxWidth="200" Items="{Binding Palettes}" SelectedItem="{Binding SelectedPalette}">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding Name}" />
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>

                    <Button
                        Margin="5,0,0,0"
                        VerticalAlignment="Bottom"
                        VerticalContentAlignment="Center"
                        Command="{Binding AssociatePaletteCommand}"
                        ToolTip.Tip="Associate an existing Palette from this Project with this Arranger">
                        <PathIcon Classes="tool" Data="{StaticResource pathIconPlusCircle}" />
                    </Button>
                </StackPanel>
            </StackPanel>

            <Border Margin="6,6,6,0" BorderBrush="{DynamicResource separatorBrush}" BorderThickness="1" IsVisible="{Binding IsIndexedColor}" />

            <StackPanel>
                <TextBlock HorizontalAlignment="Center" Text="Grid" />
                <ToggleButton Focusable="False" IsChecked="{Binding GridSettings.ShowGridlines}" ToolTip.Tip="Toggle gridline visibility (G)">
                    <PathIcon Classes="tool" Data="{StaticResource pathIconGrid}" />
                </ToggleButton>
            </StackPanel>

            <StackPanel Margin="5,0,0,0" IsVisible="{Binding CanChangeSnapMode}">
                <TextBlock HorizontalAlignment="Center" Text="Snap" />
                <ToggleButton Focusable="False" IsChecked="{Binding SnapMode, Converter={x:Static con:AppConverters.SnapModeBoolean}}" ToolTip.Tip="Snap Selection to Elements (S)">
                    <PathIcon Classes="tool" Data="{StaticResource pathIconSnap}" />
                </ToggleButton>
            </StackPanel>

            <Border Margin="12,6,12,0" BorderBrush="{DynamicResource separatorBrush}" BorderThickness="1" />

            <StackPanel IsVisible="{Binding IsTiledLayout}">
                <TextBlock HorizontalAlignment="Center" Text="Resize" />

                <Button Command="{Binding ResizeArrangerCommand}" ToolTip.Tip="Resizes the Arranger">
                    <PathIcon Classes="tool" Data="{StaticResource pathIconResize}" />
                </Button>
            </StackPanel>

            <StackPanel Margin="5,0,0,0">
                <TextBlock HorizontalAlignment="Center" Text="Edit" />

                <Button Command="{Binding EditSelectionCommand}" IsEnabled="{Binding CanEditSelection}" ToolTip.Tip="Opens selection in the pixel editor (E)">
                    <PathIcon Classes="tool vflip" Data="{StaticResource pathIconEdit}" />
                </Button>
            </StackPanel>
        </StackPanel>

        <!--  Image Display  -->
        <ScrollViewer
            Grid.Row="1"
            Grid.Column="0"
            Focusable="True"
            HorizontalScrollBarVisibility="Auto"
            KeyDown="OnKeyDown"
            KeyUp="OnKeyUp"
            VerticalScrollBarVisibility="Auto">

            <paz:ZoomBorder x:Name="_zoomBorder" PowerFactor="2">
                <Grid>
                    <!--  Image, Selection, and Paste Overlay  -->
                    <Canvas
                        x:Name="_overlayCanvas"
                        Width="{Binding BitmapAdapter.Width}"
                        Height="{Binding BitmapAdapter.Height}"
                        Background="{Binding GridSettings.BackgroundBrush}"
                        Classes="arrangerDrop"
                        ClipToBounds="True"
                        PointerExited="OnPointerExited"
                        PointerMoved="OnPointerMoved"
                        PointerPressed="OnPointerPressed"
                        PointerReleased="OnPointerReleased">

                        <!--  Arranged Image  -->
                        <Image x:Name="_image" Classes="pixel" IsHitTestVisible="False" Source="{Binding BitmapAdapter.Bitmap}" />

                        <!--  Selection Overlay  -->
                        <Rectangle
                            Canvas.Left="{Binding Selection.SelectionRect.SnappedLeft}"
                            Canvas.Top="{Binding Selection.SelectionRect.SnappedTop}"
                            Width="{Binding Selection.SelectionRect.SnappedWidth}"
                            Height="{Binding Selection.SelectionRect.SnappedHeight}"
                            Classes="arrangerDrag animatedBorder selection"
                            IsVisible="{Binding Selection.HasSelection}" />

                        <!--  Paste Image  -->
                        <Image
                            x:Name="pasteImage"
                            Canvas.Left="{Binding Paste.Rect.SnappedLeft}"
                            Canvas.Top="{Binding Paste.Rect.SnappedTop}"
                            Width="{Binding Paste.Rect.SnappedWidth, FallbackValue=0}"
                            Height="{Binding Paste.Rect.SnappedHeight, FallbackValue=0}"
                            Classes="arrangerDrag pixel"
                            IsHitTestVisible="{Binding !Paste.IsDragging}"
                            Source="{Binding Paste.OverlayImage.Bitmap}" />

                        <!--  Paste Overlay  -->
                        <Rectangle
                            Canvas.Left="{Binding Paste.Rect.SnappedLeft}"
                            Canvas.Top="{Binding Paste.Rect.SnappedTop}"
                            Width="{Binding Paste.Rect.SnappedWidth, FallbackValue=0}"
                            Height="{Binding Paste.Rect.SnappedHeight, FallbackValue=0}"
                            Classes="animatedBorder paste" />
                    </Canvas>

                    <!--  Gridline Overlay  -->
                    <ItemsControl
                        MaxWidth="{Binding BitmapAdapter.Width}"
                        MaxHeight="{Binding BitmapAdapter.Height}"
                        ClipToBounds="True"
                        IsHitTestVisible="False"
                        IsVisible="{Binding GridSettings.ShowGridlines}"
                        Items="{Binding GridSettings.Gridlines}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <Canvas IsHitTestVisible="False" />
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="{x:Type model:Gridline}">
                                <Line
                                    IsHitTestVisible="False"
                                    Stroke="{ReflectionBinding #_zoomBorder.DataContext.GridSettings.LineColor, Converter={x:Static con:AppConverters.ColorToBrush}}"
                                    StrokeThickness="0.40"
                                    UseLayoutRounding="True"
                                    StartPoint="{Binding Converter={x:Static con:AppConverters.GridlineToStartPoint}}"
                                    EndPoint="{Binding Converter={x:Static con:AppConverters.GridlineToEndPoint}}" />
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </Grid>
            </paz:ZoomBorder>
        </ScrollViewer>
    </Grid>
</UserControl>
